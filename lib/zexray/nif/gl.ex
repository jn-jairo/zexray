defmodule Zexray.NIF.Gl do
  @moduledoc false

  defmacro __using__(_opts) do
    quote do
      @nifs_gl [
        # Matrix operations
        rl_matrix_mode: 1,
        rl_push_matrix: 0,
        rl_pop_matrix: 0,
        rl_load_identity: 0,
        rl_translate: 3,
        rl_rotate: 4,
        rl_scale: 3,
        rl_mult_matrix: 1,
        rl_frustum: 6,
        rl_ortho: 6,
        rl_viewport: 4,
        rl_set_clip_planes: 2,
        rl_get_cull_distance_near: 0,
        rl_get_cull_distance_far: 0,

        # Vertex level operations
        rl_begin: 1,
        rl_end: 0,
        rl_vertex2: 2,
        rl_vertex3: 3,
        rl_tex_coord2: 2,
        rl_normal3: 3,
        rl_color4_byte: 4,
        rl_color3: 3,
        rl_color4: 4,

        # Render management
        rl_set_texture: 1
      ]

      #######################
      #  Matrix operations  #
      #######################

      @doc """
      Choose the current matrix to be transformed

      ```c
      // rlgl.h
      RLAPI void rlMatrixMode(int mode);
      ```
      """
      @doc group: :gl
      @spec rl_matrix_mode(mode :: integer) :: :ok
      def rl_matrix_mode(_mode), do: :erlang.nif_error(:undef)

      @doc """
      Push the current matrix to stack

      ```c
      // rlgl.h
      RLAPI void rlPushMatrix(void);
      ```
      """
      @doc group: :gl
      @spec rl_push_matrix() :: :ok
      def rl_push_matrix(), do: :erlang.nif_error(:undef)

      @doc """
      Pop latest inserted matrix from stack

      ```c
      // rlgl.h
      RLAPI void rlPopMatrix(void);
      ```
      """
      @doc group: :gl
      @spec rl_pop_matrix() :: :ok
      def rl_pop_matrix(), do: :erlang.nif_error(:undef)

      @doc """
      Reset current matrix to identity matrix

      ```c
      // rlgl.h
      RLAPI void rlLoadIdentity(void);
      ```
      """
      @doc group: :gl
      @spec rl_load_identity() :: :ok
      def rl_load_identity(), do: :erlang.nif_error(:undef)

      @doc """
      Multiply the current matrix by a translation matrix

      ```c
      // rlgl.h
      RLAPI void rlTranslatef(float x, float y, float z);
      ```
      """
      @doc group: :gl
      @spec rl_translate(
              x :: number,
              y :: number,
              z :: number
            ) :: :ok
      def rl_translate(
            _x,
            _y,
            _z
          ),
          do: :erlang.nif_error(:undef)

      @doc """
      Multiply the current matrix by a rotation matrix

      ```c
      // rlgl.h
      RLAPI void rlRotatef(float angle, float x, float y, float z);
      ```
      """
      @doc group: :gl
      @spec rl_rotate(
              angle :: number,
              x :: number,
              y :: number,
              z :: number
            ) :: :ok
      def rl_rotate(
            _angle,
            _x,
            _y,
            _z
          ),
          do: :erlang.nif_error(:undef)

      @doc """
      Multiply the current matrix by a scaling matrix

      ```c
      // rlgl.h
      RLAPI void rlScalef(float x, float y, float z);
      ```
      """
      @doc group: :gl
      @spec rl_scale(
              x :: number,
              y :: number,
              z :: number
            ) :: :ok
      def rl_scale(
            _x,
            _y,
            _z
          ),
          do: :erlang.nif_error(:undef)

      @doc """
      Multiply the current matrix by another matrix

      ```c
      // rlgl.h
      RLAPI void rlMultMatrixf(const float *matf);
      ```
      """
      @doc group: :gl
      @spec rl_mult_matrix(mat :: tuple) :: :ok
      def rl_mult_matrix(_mat), do: :erlang.nif_error(:undef)

      @doc """
      Multiply the current matrix by a perspective matrix generated by parameters

      ```c
      // rlgl.h
      RLAPI void rlFrustum(double left, double right, double bottom, double top, double znear, double zfar);
      ```
      """
      @doc group: :gl
      @spec rl_frustum(
              left :: number,
              right :: number,
              bottom :: number,
              top :: number,
              znear :: number,
              zfar :: number
            ) :: :ok
      def rl_frustum(
            _left,
            _right,
            _bottom,
            _top,
            _znear,
            _zfar
          ),
          do: :erlang.nif_error(:undef)

      @doc """
      Multiply the current matrix by an orthographic matrix generated by parameters

      ```c
      // rlgl.h
      RLAPI void rlOrtho(double left, double right, double bottom, double top, double znear, double zfar);
      ```
      """
      @doc group: :gl
      @spec rl_ortho(
              left :: number,
              right :: number,
              bottom :: number,
              top :: number,
              znear :: number,
              zfar :: number
            ) :: :ok
      def rl_ortho(
            _left,
            _right,
            _bottom,
            _top,
            _znear,
            _zfar
          ),
          do: :erlang.nif_error(:undef)

      @doc """
      Set the viewport area

      ```c
      // rlgl.h
      RLAPI void rlViewport(int x, int y, int width, int height);
      ```
      """
      @doc group: :gl
      @spec rl_viewport(
              x :: number,
              y :: number,
              width :: number,
              height :: number
            ) :: :ok
      def rl_viewport(
            _x,
            _y,
            _width,
            _height
          ),
          do: :erlang.nif_error(:undef)

      @doc """
      Set clip planes distances

      ```c
      // rlgl.h
      RLAPI void rlSetClipPlanes(double nearPlane, double farPlane);
      ```
      """
      @doc group: :gl
      @spec rl_set_clip_planes(
              near_plane :: number,
              far_plane :: number
            ) :: :ok
      def rl_set_clip_planes(
            _near_plane,
            _far_plane
          ),
          do: :erlang.nif_error(:undef)

      @doc """
      Get cull plane distance near

      ```c
      // rlgl.h
      RLAPI double rlGetCullDistanceNear(void);
      ```
      """
      @doc group: :gl
      @spec rl_get_cull_distance_near() :: float
      def rl_get_cull_distance_near(), do: :erlang.nif_error(:undef)

      @doc """
      Get cull plane distance far

      ```c
      // rlgl.h
      RLAPI double rlGetCullDistanceFar(void);
      ```
      """
      @doc group: :gl
      @spec rl_get_cull_distance_far() :: float
      def rl_get_cull_distance_far(), do: :erlang.nif_error(:undef)

      #############################
      #  Vertex level operations  #
      #############################

      @doc """
      Initialize drawing mode (how to organize vertex)

      ```c
      // rlgl.h
      RLAPI void rlBegin(int mode);
      ```
      """
      @doc group: :gl
      @spec rl_begin(mode :: integer) :: :ok
      def rl_begin(_mode), do: :erlang.nif_error(:undef)

      @doc """
      Finish vertex providing

      ```c
      // rlgl.h
      RLAPI void rlEnd(void);
      ```
      """
      @doc group: :gl
      @spec rl_end() :: :ok
      def rl_end(), do: :erlang.nif_error(:undef)

      @doc """
      Define one vertex (position) - 2 float

      ```c
      // rlgl.h
      RLAPI void rlVertex2f(float x, float y);
      ```
      """
      @doc group: :gl
      @spec rl_vertex2(
              x :: number,
              y :: number
            ) :: :ok
      def rl_vertex2(
            _x,
            _y
          ),
          do: :erlang.nif_error(:undef)

      @doc """
      Define one vertex (position) - 3 float

      ```c
      // rlgl.h
      RLAPI void rlVertex3f(float x, float y, float z);
      ```
      """
      @doc group: :gl
      @spec rl_vertex3(
              x :: number,
              y :: number,
              z :: number
            ) :: :ok
      def rl_vertex3(
            _x,
            _y,
            _z
          ),
          do: :erlang.nif_error(:undef)

      @doc """
      Define one vertex (texture coordinate) - 2 float

      ```c
      // rlgl.h
      RLAPI void rlTexCoord2f(float x, float y);
      ```
      """
      @doc group: :gl
      @spec rl_tex_coord2(
              x :: number,
              y :: number
            ) :: :ok
      def rl_tex_coord2(
            _x,
            _y
          ),
          do: :erlang.nif_error(:undef)

      @doc """
      Define one vertex (normal) - 3 float

      ```c
      // rlgl.h
      RLAPI void rlNormal3f(float x, float y, float z);
      ```
      """
      @doc group: :gl
      @spec rl_normal3(
              x :: number,
              y :: number,
              z :: number
            ) :: :ok
      def rl_normal3(
            _x,
            _y,
            _z
          ),
          do: :erlang.nif_error(:undef)

      @doc """
      Define one vertex (color) - 4 byte

      ```c
      // rlgl.h
      RLAPI void rlColor4ub(unsigned char r, unsigned char g, unsigned char b, unsigned char a);
      ```
      """
      @doc group: :gl
      @spec rl_color4_byte(
              r :: number,
              g :: number,
              b :: number,
              a :: number
            ) :: :ok
      def rl_color4_byte(
            _r,
            _g,
            _b,
            _a
          ),
          do: :erlang.nif_error(:undef)

      @doc """
      Define one vertex (color) - 3 float

      ```c
      // rlgl.h
      RLAPI void rlColor3f(float x, float y, float z);
      ```
      """
      @doc group: :gl
      @spec rl_color3(
              x :: number,
              y :: number,
              z :: number
            ) :: :ok
      def rl_color3(
            _x,
            _y,
            _z
          ),
          do: :erlang.nif_error(:undef)

      @doc """
      Define one vertex (color) - 4 float

      ```c
      // rlgl.h
      RLAPI void rlColor4f(float x, float y, float z, float w);
      ```
      """
      @doc group: :gl
      @spec rl_color4(
              x :: number,
              y :: number,
              z :: number,
              w :: number
            ) :: :ok
      def rl_color4(
            _x,
            _y,
            _z,
            _w
          ),
          do: :erlang.nif_error(:undef)

      #######################
      #  Render management  #
      #######################

      @doc """
      Set current texture for render batch and check buffers limits

      ```c
      // rlgl.h
      RLAPI void rlSetTexture(unsigned int id);
      ```
      """
      @doc group: :gl
      @spec rl_set_texture(texture :: non_neg_integer | tuple) :: :ok
      def rl_set_texture(_texture), do: :erlang.nif_error(:undef)
    end
  end
end
